// Copyright (C) 2018  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "08/16/2019 21:17:11"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          YouseiOS
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module YouseiOS_vlg_vec_tst();
// constants                                           
// general purpose registers
reg Clock50M;
reg Reset;
reg Set;
reg Swap;
reg [12:0] Switches;
reg Type;
// wires                                               
wire [31:0] Output;

// assign statements (if any)                          
YouseiOS i1 (
// port map - connection between master ports and signals/registers   
	.Clock50M(Clock50M),
	.\Output (Output),
	.Reset(Reset),
	.Set(Set),
	.Swap(Swap),
	.Switches(Switches),
	.\Type (Type)
);
initial 
begin 
#1000000 $finish;
end 

// Clock50M
always
begin
	Clock50M = 1'b0;
	Clock50M = #500 1'b1;
	#500;
end 

// Reset
initial
begin
	Reset = 1'b1;
end 

// Set
initial
begin
	Set = 1'b0;
end 

// Swap
initial
begin
	Swap = 1'b0;
end 
// Switches[ 12 ]
initial
begin
	Switches[12] = 1'b0;
end 
// Switches[ 11 ]
initial
begin
	Switches[11] = 1'b0;
end 
// Switches[ 10 ]
initial
begin
	Switches[10] = 1'b0;
end 
// Switches[ 9 ]
initial
begin
	Switches[9] = 1'b0;
end 
// Switches[ 8 ]
initial
begin
	Switches[8] = 1'b0;
end 
// Switches[ 7 ]
initial
begin
	Switches[7] = 1'b0;
end 
// Switches[ 6 ]
initial
begin
	Switches[6] = 1'b0;
end 
// Switches[ 5 ]
initial
begin
	Switches[5] = 1'b0;
end 
// Switches[ 4 ]
initial
begin
	Switches[4] = 1'b0;
end 
// Switches[ 3 ]
initial
begin
	Switches[3] = 1'b0;
end 
// Switches[ 2 ]
initial
begin
	Switches[2] = 1'b0;
end 
// Switches[ 1 ]
initial
begin
	Switches[1] = 1'b0;
end 
// Switches[ 0 ]
initial
begin
	Switches[0] = 1'b0;
end 

// Type
initial
begin
	Type = 1'b0;
end 
endmodule

